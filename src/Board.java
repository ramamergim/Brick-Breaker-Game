import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.Timer;
import java.util.TimerTask;

import javax.swing.JPanel;

public class Board extends JPanel implements Sizes {

	/**
	 * Automatically generated by Eclipse!
	 */
	private static final long serialVersionUID = 2828404879535831854L;

	private Timer timer;
	private String message = "Game Over";
	private Ball ball;
	private Paddle paddle;
	private Brick[] bricks;
	private boolean ingame = true;
	private int score = 0;

	public Board() {
		initBoard();
		//gameInit();
	}

	/**
	 * TimerTask - we move the ball and the paddle in milliseconds
	 */
	private void initBoard() {
		addKeyListener(new KeyAdapter() {
			@Override
			public void keyReleased(KeyEvent e) {
				paddle.keyReleased(e);
			}

			@Override
			public void keyPressed(KeyEvent e) {
				paddle.keyPressed(e);
			}
		});

		setFocusable(true);

		bricks = new Brick[BRICKS];
		setDoubleBuffered(true); // used to use a buffer to paint.
		timer = new Timer();
		/**
		 * DELAY - starts the moving objects
		 * PERIOD - the speed of the objects
		 */
		timer.scheduleAtFixedRate(new TimerTask() {
			@Override
			public void run() {
				ball.move();
				paddle.move();
				checkCollision();
				repaint();
			}
		}, DELAY, PERIOD);
	}

	@Override
	public void addNotify() {
		super.addNotify();
		gameInit();
	}

	/**
	 * Here we create a ball, a paddle and (BRICKS) bricks. BRICKS - the number
	 * of bricks we want to have. It is initialized in Sizes interface.
	 */
	private void gameInit() {
		ball = new Ball();
		paddle = new Paddle();
		
		int k = 0;
		for (int i = 0; i < BRICK_ROWS; i++) {
			for (int j = 0; j < BRICK_COLUMNS; j++) {
				bricks[k] = new Brick(j * 40, i * 20 + 10);
				k++;
			}
		}
	}

	/**
	 * Depending on the ingame(true or false), we either draw all the objects or
	 * finish the game.
	 */
	@Override
	public void paintComponent(Graphics g) {
		super.paintComponent(g);

		Graphics2D g2d = (Graphics2D) g;
		//it makes edges smoothing on curved lines
		g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		//it makes the output with a high quality
		g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);

		if (ingame) {
			drawObjects(g2d);
		} else {
			gameFinished(g2d);
		}
		Toolkit.getDefaultToolkit().sync();
	}

	/**
	 * The method draws all the objects.
	 * @param g2d - the pane that draws.
	 */
	private void drawObjects(Graphics2D g2d) {
		g2d.drawImage(ball.getImage(), ball.getX(), ball.getY(), ball.getWidth(), ball.getHeight(), this);
		g2d.drawImage(paddle.getImage(), paddle.getX(), paddle.getY(), paddle.getWidth(), paddle.getHeight(), this);

		for (int i = 0; i < BRICKS; i++) {
			if (!bricks[i].isDestroyed()) {
				g2d.drawImage(bricks[i].getImage(), bricks[i].getX(), bricks[i].getY(), bricks[i].getWidth(),
						bricks[i].getHeight(), this);
			}
		}
	}

	/**
	 * Draws game over or congratulations with the message variable.
	 * @param g2d - the pane that draws.
	 */
	private void gameFinished(Graphics2D g2d) {
		Font font = new Font("Verdana", Font.BOLD, 18);
		FontMetrics metr = this.getFontMetrics(font);

		g2d.setColor(Color.BLACK);
		g2d.setFont(font);
		g2d.drawString(message, (Sizes.WIDTH - metr.stringWidth(message)) / 2, Sizes.WIDTH / 2);
		BreakoutGame.panelSouth.setVisible(true);
	}

	private void stopGame() {
		ingame = false;
		timer.cancel();
	}
	
	@SuppressWarnings("unused")
	private void pauseGame() {
		timer.cancel();
	}
	
	@SuppressWarnings("unused")
	private void unPauseGame() {
		timer = new Timer();
		/**
		 * DELAY - starts the moving objects
		 * PERIOD - the speed of the objects
		 */
		timer.scheduleAtFixedRate(new TimerTask() {
			@Override
			public void run() {
				ball.move();
				paddle.move();
				checkCollision();
				repaint();
			}
		}, DELAY, PERIOD);
	}

	/**
	 * If the ball hits the bottom, the game is stopped. If all bricks are
	 * destroyed, you win the game.
	 */
	private void checkCollision() {
		if (ball.getRect().getMaxY() > Sizes.BOTTOM - 4)
			stopGame();

		for (int i = 0, j = 0; i < BRICKS; i++) {
			if (bricks[i].isDestroyed())
				j++;
			if (j == BRICKS) {
				message = "Your score is: " + score;
				stopGame();
				BreakoutGame.panelSouth.setVisible(true);
				BreakoutGame.btnRestart.setText("New Game");
			}
		}

		if ((ball.getRect()).intersects(paddle.getRect())) {
			int paddleLPos = (int) paddle.getRect().getMinX();
			int ballLPos = (int) ball.getRect().getMinX();

			int first = paddleLPos + 8;
			int second = paddleLPos + 16;
			int third = paddleLPos + 24;
			int fourth = paddleLPos + 32;

			// If the ball hits the first part of the paddle, we change the
			// direction of the ball to the north-west.
			if (ballLPos < first) {
				ball.setXDirection(-1);
				ball.setYDirection(-1);
			}

			if (ballLPos >= first && ballLPos < second) {
				ball.setXDirection(-1);
				//ball.setYDirection(-1);

				ball.setYDirection(-1 * ball.getYDirection());
			}

			if (ballLPos >= second && ballLPos < third) {
				ball.setXDirection(0);
				ball.setYDirection(-1);
			}

			if (ballLPos >= third && ballLPos < fourth) {
				ball.setXDirection(1);
				//ball.setYDirection(-1);
				ball.setYDirection(-1 * ball.getYDirection());
			}

			if (ballLPos > fourth) {
				ball.setXDirection(1);
				ball.setYDirection(-1);
			}
		}

		for (int i = 0; i < BRICKS; i++) {
			if ((ball.getRect()).intersects(bricks[i].getRect())) {
				int ballLeft = (int) ball.getRect().getMinX();
				int ballHeight = (int) ball.getRect().getHeight();
				int ballWidth = (int) ball.getRect().getWidth();
				int ballTop = (int) ball.getRect().getMinY();

				Point pointRight = new Point(ballLeft + ballWidth + 1, ballTop);
				Point pointLeft = new Point(ballLeft - 1, ballTop);
				Point pointTop = new Point(ballLeft, ballTop - 1);
				Point pointBottom = new Point(ballLeft, ballTop + ballHeight + 1);

				if (!bricks[i].isDestroyed()) {
					if (bricks[i].getRect().contains(pointRight)) {
						ball.setXDirection(-1);
					} else if (bricks[i].getRect().contains(pointLeft)) {
						ball.setXDirection(1);
					}
					// If the ball hits the bottom of the brick, we change the y
					// direction of the ball; it goes down.
					if (bricks[i].getRect().contains(pointTop)) {
						ball.setYDirection(1);
					} else if (bricks[i].getRect().contains(pointBottom)) {
						ball.setYDirection(-1);
					}

					bricks[i].setDestroyed(true);
					score += 1;
				}
			}
		}
	}

	public void restartGame() {
		new Board();
	}
}
